01) Create Spring boot project and expose the end points.
02) Add <finalName>docker-jenkins-integration-sample</finalName> pom.xml after plugins.
03) Create Dockerfile and add below codes.
	FROM openjdk:8
	EXPOSE 8080
	ADD target/docker-jenkins-integration-sample.jar docker-jenkins-integration-sample.jar
	ENTRYPOINT ["java","-jar","/docker-jenkins-integration-sample.jar"]
04) Create project in jenkins.
03) Create item --> Give name --> Choose Pipeline project --> Save.
04) Add Description --> Select Github project --> Add project URL
05) Check GitHub hook trigger for GITScm polling.
06) Create pipeline to github repository.
	Click pipeline syntax.
	checkout: checkout from version control.
	Add github repository URL.
	Add branch name.
	Click generate pipeline script.
	Add script to jenkins file.
07) Configure the manve nin jenkins.
08) Follow this,
	Windows doesn't understand the "sh" command. To enable this, add
	C:\Program Files\Git\bin &
	C:\Program Files\Git\usr\bin
	to the System Environment variable PATH, than restart your system.
	Than execute your command in jenkins, it will work. 
09) Add <finalName>devops-integration</finalName> to pom.xml
10) Create docker file and add below details,
	FROM openjdk:8
	EXPOSE 8080
	ADD target/devops-integration.jar devops-integration.jar
	ENTRYPOINT ["java","-jar","/devops-integration.jar"]
11) Build the porject.
12) Push modification to github repository.
13) Add below pipeline script to jenkins pipeline.
	stage('Build docker image'){
            steps{
                script{
                    sh 'docker build -t javatechie/devops-integration .'
                }
            }
        }
14) Add docker plugin to jenkins. (Global tool configuration and manage plugins) 
15) Add dockerhub pipeline script as below.
	Click pipeline sytax.
	Select with Credentials(Bind credentials to variable).
	Give variable name.
	Click Add.
	Select Secret text under Kind.
	Add Secret(Jenkins password).
	ID (any value)
	Click Generate Pipeline Script.
16) Add this stage jenkins pipeline as below
	        stage('Push image to Hub'){
            steps{
                script{
                   withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')]) {
                   sh 'docker login -u ${dockerusername} -p ${dockerhubpwd}'

}
                   sh 'docker push ${dockerusername}/devops-integration'
                }
            }
        }





